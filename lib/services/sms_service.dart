import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import '../models/user_profile_model.dart';

// ‡πÄ‡∏û‡∏¥‡πà‡∏° enum ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á SMS ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
enum SmsStatus {
  success,   // ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  failed,    // ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  pending,   // ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á/‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  noCredit   // ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏°‡∏î
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á class ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á SMS ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
class SmsResult {
  final bool allSuccess;
  final Map<String, SmsStatus> statuses; // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå
  final String errorMessage;

  SmsResult({
    required this.allSuccess,
    required this.statuses,
    this.errorMessage = '',
  });

  @override
  String toString() {
    return 'SmsResult(allSuccess: $allSuccess, statuses: $statuses, errorMessage: $errorMessage)';
  }
  
  // ‡πÅ‡∏õ‡∏•‡∏á SmsStatus ‡πÄ‡∏õ‡πá‡∏ô String ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  String statusToString(SmsStatus status) {
    switch (status) {
      case SmsStatus.success:
        return 'success';
      case SmsStatus.failed:
        return 'failed';
      case SmsStatus.pending:
        return 'pending';
      case SmsStatus.noCredit:
        return 'no_credit';
      default:
        return 'unknown';
    }
  }
  
  // ‡πÅ‡∏õ‡∏•‡∏á SmsResult ‡πÄ‡∏õ‡πá‡∏ô Map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore
  Map<String, dynamic> toJson() {
    return {
      'allSuccess': allSuccess,
      'errorMessage': errorMessage,
      'statuses': statuses.map((phone, status) => 
          MapEntry(phone, statusToString(status))),
    };
  }
}

class SmsService {
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API THSMS (V1)
  final String _apiUsername = 'apirebmp';
  final String _apiPassword = 'Aphiwit@2546';
  final String _apiUrl = 'https://thsms.com/api/rest';
  final String _sender = 'DirectSMS'; // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏±‡∏ö THSMS

  // Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API V2 (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
  final String _apiTokenV2 = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC90aHNtcy5jb21cL21hbmFnZVwvYXBpLWtleSIsImlhdCI6MTc0MzQyNDM5MSwibmJmIjoxNzQzNDI1OTY4LCJqdGkiOiJrZ1htbmJVZFljR3J5YkY0Iiwic3ViIjoxMTE3MjYsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.v3gfImvvTC3-A7sHaoXaHUXmkyElmZI8S4UYF_EiYzM';

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
  Future<Map<String, dynamic>> checkCredit() async {
    try {
      // ‡πÉ‡∏ä‡πâ API V1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
      final String creditUrl = '$_apiUrl?username=$_apiUsername&password=$_apiPassword&method=credit';
      
      debugPrint('‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API: $creditUrl');
      
      final response = await http.get(Uri.parse(creditUrl));
      
      debugPrint('‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${response.statusCode}');
      debugPrint('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${response.body}');
      
      if (response.statusCode == 200) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô XML ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ success ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (response.body.contains('<status>success</status>')) {
          // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏à‡∏≤‡∏Å XML
          final RegExp creditRegex = RegExp(r'<amount>(.*?)</amount>');
          final match = creditRegex.firstMatch(response.body);
          
          String credit = '0';
          if (match != null && match.groupCount >= 1) {
            credit = match.group(1) ?? '0';
          }
          
          return {
            'status': 'success',
            'credit': credit,
            'balance': credit,
            'hasCredit': double.tryParse(credit) != null && double.parse(credit) > 0,
          };
        } else {
          return {
            'status': 'error',
            'credit': '0',
            'balance': '0',
            'hasCredit': false,
            'message': '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.body}'
          };
        }
      } else {
        return {
          'status': 'error',
          'credit': '0',
          'balance': '0',
          'hasCredit': false,
          'message': '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (${response.statusCode}): ${response.body}'
        };
      }
    } catch (e) {
      debugPrint('Error checking credit: $e');
      return {
        'status': 'error',
        'credit': '0',
        'balance': '0',
        'hasCredit': false,
        'message': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: $e'
      };
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SOS ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  String createSosMessage(UserProfile userProfile, String mapLink) {
    return 'üö® SOS! ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô! ${userProfile.fullName ?? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'} ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏î‡πà‡∏ß‡∏ô!\n\n'
        'üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:\n'
        '- ‡∏ä‡∏∑‡πà‡∏≠: ${userProfile.fullName ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n'
        '- ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${userProfile.phone ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n'
        '- ‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î: ${userProfile.bloodType ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n'
        '- ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡πà‡∏ß‡∏¢: ${userProfile.medicalConditions ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n'
        '- ‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ: ${userProfile.allergies ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n\n'
        'üìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $mapLink\n\n'
        '‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô Google Maps';
  }
  
  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SOS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô SmsResult)
  Future<SmsResult> sendSosMessage(UserProfile userProfile, String mapLink, List<String> phoneNumbers) async {
    try {
      if (phoneNumbers.isEmpty) {
        throw Exception('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô');
      }
      
      String messageText = createSosMessage(userProfile, mapLink);
      return await sendBulkSms(phoneNumbers, messageText);
    } catch (e) {
      debugPrint('Error sending SOS message: $e');
      return SmsResult(
        allSuccess: false,
        statuses: Map.fromIterable(
          phoneNumbers,
          key: (phone) => phone,
          value: (_) => SmsStatus.failed
        ),
        errorMessage: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SOS: $e',
      );
    }
  }

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á SMS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô bool)
  Future<bool> sendSms(String phoneNumber, String message) async {
    try {
      SmsResult result = await sendBulkSms([phoneNumber], message);
      return result.allSuccess || result.statuses[phoneNumber] == SmsStatus.success;
    } catch (e) {
      debugPrint('Error in simple sendSms: $e');
      return false;
    }
  }

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á SMS ‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° (API V1) (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô SmsResult)
  Future<SmsResult> sendBulkSms(List<String> phoneNumbers, String message) async {
    try {
      if (phoneNumbers.isEmpty) {
        throw Exception('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
      final creditInfo = await checkCredit();
      debugPrint('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: $creditInfo');
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡πÉ‡∏´‡πâ return ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ
      if (!creditInfo['hasCredit']) {
        debugPrint('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á SMS ‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏°‡∏î');
        return SmsResult(
          allSuccess: false,
          statuses: Map.fromIterable(
            phoneNumbers,
            key: (phone) => phone,
            value: (_) => SmsStatus.noCredit
          ),
          errorMessage: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á SMS ‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏°‡∏î (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${creditInfo['credit']})',
        );
      }

      bool allSuccess = true;
      String errorMessage = '';
      Map<String, SmsStatus> statuses = {};
      
      for (final recipient in phoneNumbers) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
        String formattedPhone = recipient.replaceAll('-', '').replaceAll(' ', '');
        if (formattedPhone.startsWith('+')) {
          formattedPhone = formattedPhone.substring(1);
        } else if (formattedPhone.startsWith('0')) {
          formattedPhone = '66${formattedPhone.substring(1)}';
        }
        
        debugPrint('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á SMS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á: $formattedPhone');
        debugPrint('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: $message');
        debugPrint('‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: $_sender');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á SMS ‡∏ï‡∏≤‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ V1
        final String encodedMessage = Uri.encodeComponent(message);
        final String sendUrl = '$_apiUrl?username=$_apiUsername&password=$_apiPassword&method=send&from=$_sender&to=$formattedPhone&message=$encodedMessage';
        
        debugPrint('URL ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á: $sendUrl');
        
        // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
        final response = await http.get(Uri.parse(sendUrl));
        
        // ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API
        debugPrint('‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${response.statusCode}');
        debugPrint('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${response.body}');
        
        if (response.statusCode == 200) {
          // THSMS ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô XML - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ
          if (response.body.contains('<status>success</status>')) {
            debugPrint('‡∏™‡πà‡∏á SMS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á $formattedPhone ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            statuses[recipient] = SmsStatus.success;
          } else if (response.body.contains('not enough credit')) {
            // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡∏û‡∏≠
            debugPrint('‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á SMS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á $formattedPhone');
            allSuccess = false;
            errorMessage = '‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï SMS ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠';
            statuses[recipient] = SmsStatus.noCredit;
          } else {
            debugPrint('‡∏™‡πà‡∏á SMS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á $formattedPhone ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.body}');
            allSuccess = false;
            errorMessage = response.body;
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
            if (response.body.contains('queue') || response.body.contains('pending')) {
              statuses[recipient] = SmsStatus.pending;
            } else {
              statuses[recipient] = SmsStatus.failed;
            }
          }
        } else {
          debugPrint('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á SMS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á $formattedPhone - ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${response.statusCode}');
          allSuccess = false;
          errorMessage = '‡∏£‡∏´‡∏±‡∏™‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${response.statusCode}, ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${response.body}';
          statuses[recipient] = SmsStatus.failed;
        }
      }
      
      if (!allSuccess) {
        debugPrint('‡∏ö‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $errorMessage');
      }
      
      return SmsResult(
        allSuccess: allSuccess,
        statuses: statuses,
        errorMessage: errorMessage,
      );
    } catch (e) {
      debugPrint('Error sending SMS: $e');
      return SmsResult(
        allSuccess: false,
        statuses: Map.fromIterable(
          phoneNumbers, 
          key: (phone) => phone,
          value: (_) => SmsStatus.failed
        ),
        errorMessage: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á SMS: $e',
      );
    }
  }
} 